// @sylefeb 2022-01-10
// MIT license, see LICENSE_MIT in Silice repo root
// https://github.com/sylefeb/Silice/

#include "config.h"
#include "std.h"
#include "oled.h"
#include "display.h"
#include "printf.h"
#include "sdcard.h"
#define MAX_FILENAMES 32
#define MAX_FILENAME_SIZE 128

// include the fat32 library
#include "fat_io_lib/src/fat_filelib.h"

char item[MAX_FILENAMES][MAX_FILENAME_SIZE];
char path_history[50];
char path[MAX_FILENAME_SIZE];

void main()
{
  // turn LEDs off
  *LEDS = 0;
  // install putchar handler for printf
  f_putchar = display_putchar;
  // init screen
  oled_init();
  oled_fullscreen();
  oled_clear(0);
  int selected = 0;
  int pulse = 0;
  int n_items = 0;
  memcpy(path, "/", MAX_FILENAME_SIZE);
  // init sdcard
  sdcard_init();
  // initialise File IO Library
  fl_init();
  // attach media access functions to library
  while (fl_attach_media(sdcard_readsector, sdcard_writesector) != FAT_INIT_OK) {
    // keep trying, we need this
  }

  while(1) {
    // header
    memset(display_framebuffer(),0x00,128*128);
    display_refresh();
    display_set_cursor(0,0);
    display_set_front_back_color(0,255);
    //printf("    ===== Musics =====    \n\n");
    display_refresh();
    display_set_front_back_color(255,0);
    // list files (see fl_listdirectory if at_io_lib/src/fat_filelib.c)
    FL_DIR dirstat;
    // FL_LOCK(&_fs);
    if (fl_opendir(path, &dirstat)) {
        struct fs_dir_ent dirent;
        while (fl_readdir(&dirstat, &dirent) == 0) {
                // print file name
                //printf("%s [%d bytes]\n", dirent.filename, dirent.size);
                memcpy(item[n_items], dirent.filename, MAX_FILENAME_SIZE);
                n_items++;
        }
        fl_closedir(&dirstat);
    }
    // FL_UNLOCK(&_fs);
    

    while (1) {

        display_set_cursor(0,0);
        // pulsing header
        display_set_front_back_color((pulse+127)&255,pulse);
        pulse += 7;
        printf("    ===== songs =====    \n\n");
        // list items
        for (int i = 0; i < n_items; ++i) {
        if (i == selected) { // highlight selected
            display_set_front_back_color(0,255);
        } else {
            display_set_front_back_color(255,0);
        }
        printf("%d> %s\n",i,item[i]);
        }
        display_refresh();

        // read buttons and update selection
        if (*BUTTONS & (1<<3)) {
        -- selected;
        }
        if (*BUTTONS & (1<<4)) {
        ++ selected;
        }
        if (*BUTTONS & (1<<5)) {
            //*path = "/";
            strcpy(path, path_history);
            n_items = 0;
            break;
        }
        if (*BUTTONS & (1<<6)) {
            memcpy(path_history, path, MAX_FILENAME_SIZE);
            strcat(path, item[selected]);
            n_items = 0;
            break;
        }
        // wrap around
        if (selected < 0) {
        selected = n_items - 1;
        }
        if (selected >= n_items) {
        selected = 0;
        }

    }
  }

}